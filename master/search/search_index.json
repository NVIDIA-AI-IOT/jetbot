{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"JetBot Go to GitHub Get Started JetBot is an open-source robot based on NVIDIA Jetson Nano. You'll like it because... It's Affordable JetBot costs less than $250 in parts, including Jetson Nano. The DIY kit includes a bill of materials which you must purchase and a 3D printed chassis that you can print, or order. If you're looking to get up and running as quick as possible, there are also many third party kits available that come pre-bundled. It's Educational JetBot includes a set of Jupyter notebooks which cover basic robotics concepts like programatic motor control, to more advanced topics like training a custom AI for avoiding collisions. What you'll learn isn't limited to JetBot. You'll learn concepts related to neural network data collection and training that extend as far as your imagination. It's Easy to Setup JetBot is programmed from your web browser. Just connect your JetBot to Wifi and launch the JetBot Docker container . This enables JetBot's web programming environment, which is available even after the JetBot reboots. Once your JetBot boots, just type it's IP address into your web browser and start programming. It's Fun! We built JetBot to make exploring ideas related to robotics as fun as possible. In effect, it's a portable, battery powered AI computer with a camera that's super easy to program. This makes it the perfect platform for trying new ideas related to AI, image processing and robotics. Our experiments have led us to new projects like JetRacer , and we're excited to see where your experiments take you. Get Started To get started with JetBot, follow the Getting Started instructions. If you run into any issues along the way, please let us know ! Go to GitHub Get Started Get involved We really appreciate any feedback related to JetBot, and also just enjoy seeing what you're working on! There is a growing community of Jetson Nano and JetBot users. It's easy to get involved involved... Ask a question or report a bug by creating an issue Share your project or ask a question on the Jetson Developer Forums","title":"Home"},{"location":"index.html#jetbot","text":"Go to GitHub Get Started JetBot is an open-source robot based on NVIDIA Jetson Nano. You'll like it because...","title":"JetBot"},{"location":"index.html#its-affordable","text":"JetBot costs less than $250 in parts, including Jetson Nano. The DIY kit includes a bill of materials which you must purchase and a 3D printed chassis that you can print, or order. If you're looking to get up and running as quick as possible, there are also many third party kits available that come pre-bundled.","title":"It's Affordable"},{"location":"index.html#its-educational","text":"JetBot includes a set of Jupyter notebooks which cover basic robotics concepts like programatic motor control, to more advanced topics like training a custom AI for avoiding collisions. What you'll learn isn't limited to JetBot. You'll learn concepts related to neural network data collection and training that extend as far as your imagination.","title":"It's Educational"},{"location":"index.html#its-easy-to-setup","text":"JetBot is programmed from your web browser. Just connect your JetBot to Wifi and launch the JetBot Docker container . This enables JetBot's web programming environment, which is available even after the JetBot reboots. Once your JetBot boots, just type it's IP address into your web browser and start programming.","title":"It's Easy to Setup"},{"location":"index.html#its-fun","text":"We built JetBot to make exploring ideas related to robotics as fun as possible. In effect, it's a portable, battery powered AI computer with a camera that's super easy to program. This makes it the perfect platform for trying new ideas related to AI, image processing and robotics. Our experiments have led us to new projects like JetRacer , and we're excited to see where your experiments take you.","title":"It's Fun!"},{"location":"index.html#get-started","text":"To get started with JetBot, follow the Getting Started instructions. If you run into any issues along the way, please let us know ! Go to GitHub Get Started","title":"Get Started"},{"location":"index.html#get-involved","text":"We really appreciate any feedback related to JetBot, and also just enjoy seeing what you're working on! There is a growing community of Jetson Nano and JetBot users. It's easy to get involved involved... Ask a question or report a bug by creating an issue Share your project or ask a question on the Jetson Developer Forums","title":"Get involved"},{"location":"3d_printing.html","text":"This page has useful information related to printing the JetBot chassis using a 3D printer. There are two methods for printing JetBot Print by yourself Use a printing service Method 1 - Print by yourself If you have a 3D printer, we recommend printing the JetBot components yourself! Print facts Below are some facts related to printing a single JetBot. Print time: 10-12 hours Material used: < 100 grams Material cost: ~ $2 Tested Printers We've tested that the following printers are able to print JetBot successfully. Model Cost URL Monoprice Voxel $320 Amazon Ultimaker 2+ $2500 Amazon Tested Filaments Based on our experience, we recommend using PLA filament when printing JetBot. Below is a collection of filaments that we have tested with the Monoprice Voxel 3D printer. Brand Thickness Material Color URL Notes AmazonBasics 1.75mm PLA Silver Amazon Smooth, dark metallic finish AmazonBasics 1.75mm PLA Neon Green Amazon Smooth, pale finish AmazonBasics 1.75mm PLA Yellow Amazon Bold yellow, slightly translucent AmazonBasics 1.75mm PLA Purple Amazon Smooth, pale finish Printing and slicing configuration STL unit: mm Print orientation Slice configuration (Cura) Method 2 - Use a printing service If you don't have a 3D printer on hand, and are not interested in purchasing one, there are external services that can print the chassis for you. Below are some quotes from popular 3D printing services Please note, we have not tested these services yet ourselves, so please proceed with caution. If you find a print service that worked well for you, we'd love to hear! Please let us know by creating an issue on GitHub or mentioning it in the chat channel Service Quote 3DHubs $36.66 Jinxbot $91.42 Sculpteo ~$100","title":"3D Printing"},{"location":"3d_printing.html#method-1-print-by-yourself","text":"If you have a 3D printer, we recommend printing the JetBot components yourself!","title":"Method 1 - Print by yourself"},{"location":"3d_printing.html#print-facts","text":"Below are some facts related to printing a single JetBot. Print time: 10-12 hours Material used: < 100 grams Material cost: ~ $2","title":"Print facts"},{"location":"3d_printing.html#tested-printers","text":"We've tested that the following printers are able to print JetBot successfully. Model Cost URL Monoprice Voxel $320 Amazon Ultimaker 2+ $2500 Amazon","title":"Tested Printers"},{"location":"3d_printing.html#tested-filaments","text":"Based on our experience, we recommend using PLA filament when printing JetBot. Below is a collection of filaments that we have tested with the Monoprice Voxel 3D printer. Brand Thickness Material Color URL Notes AmazonBasics 1.75mm PLA Silver Amazon Smooth, dark metallic finish AmazonBasics 1.75mm PLA Neon Green Amazon Smooth, pale finish AmazonBasics 1.75mm PLA Yellow Amazon Bold yellow, slightly translucent AmazonBasics 1.75mm PLA Purple Amazon Smooth, pale finish","title":"Tested Filaments"},{"location":"3d_printing.html#printing-and-slicing-configuration","text":"STL unit: mm Print orientation Slice configuration (Cura)","title":"Printing and slicing configuration"},{"location":"3d_printing.html#method-2-use-a-printing-service","text":"If you don't have a 3D printer on hand, and are not interested in purchasing one, there are external services that can print the chassis for you. Below are some quotes from popular 3D printing services Please note, we have not tested these services yet ourselves, so please proceed with caution. If you find a print service that worked well for you, we'd love to hear! Please let us know by creating an issue on GitHub or mentioning it in the chat channel Service Quote 3DHubs $36.66 Jinxbot $91.42 Sculpteo ~$100","title":"Method 2 - Use a printing service"},{"location":"CHANGELOG.html","text":"Changes Master [0.4.2] - 11/10/2020 Fixed Resolved software issue which affected certain motor driver variants [0.4.1] - 10/22/2020 Added ZMQ Camera publisher to improve stability of Camera and allow camera use in multiple notebooks Docker containers for ML dependencies, PiOLED display, ZMQ Camera publisher, and Jupyter Lab server Inline documentation using mkdocs-material and mike Changed Default Camera class now uses ZMQ Camera. This means you must run the ZMQ camera publisher to access the camera as before. If you wish to use the old Camera class, do from jetbot.camera.opencv_gst_camera import OpenCvGstCamera and camera = OpenCvGstCamera() Deprecated JetPack 4.3 SD card image Fixed Camera shutdown failures are avoided by addition of ZMQ Camera. No longer need for constant systemctl restart nvargus-daemon calls. Camera queue buildup for heavier image processing workloads is fixed in ZMQ Camera by dropping old frames using conflate option. 0.4.0 - 1/15/2020 Added Added support for JetPack 4.3 SD card image. Found here . Changed Updated Object Detector SD card image. Found here 0.3.0 - 3/9/2019 Added Initial release with JetPack 4.2 SD card image. Found here","title":"Changes"},{"location":"CHANGELOG.html#changes","text":"","title":"Changes"},{"location":"CHANGELOG.html#master","text":"","title":"Master"},{"location":"CHANGELOG.html#042-11102020","text":"","title":"[0.4.2] - 11/10/2020"},{"location":"CHANGELOG.html#fixed","text":"Resolved software issue which affected certain motor driver variants","title":"Fixed"},{"location":"CHANGELOG.html#041-10222020","text":"","title":"[0.4.1] - 10/22/2020"},{"location":"CHANGELOG.html#added","text":"ZMQ Camera publisher to improve stability of Camera and allow camera use in multiple notebooks Docker containers for ML dependencies, PiOLED display, ZMQ Camera publisher, and Jupyter Lab server Inline documentation using mkdocs-material and mike","title":"Added"},{"location":"CHANGELOG.html#changed","text":"Default Camera class now uses ZMQ Camera. This means you must run the ZMQ camera publisher to access the camera as before. If you wish to use the old Camera class, do from jetbot.camera.opencv_gst_camera import OpenCvGstCamera and camera = OpenCvGstCamera()","title":"Changed"},{"location":"CHANGELOG.html#deprecated","text":"JetPack 4.3 SD card image","title":"Deprecated"},{"location":"CHANGELOG.html#fixed_1","text":"Camera shutdown failures are avoided by addition of ZMQ Camera. No longer need for constant systemctl restart nvargus-daemon calls. Camera queue buildup for heavier image processing workloads is fixed in ZMQ Camera by dropping old frames using conflate option.","title":"Fixed"},{"location":"CHANGELOG.html#040-1152020","text":"","title":"0.4.0 - 1/15/2020"},{"location":"CHANGELOG.html#added_1","text":"Added support for JetPack 4.3 SD card image. Found here .","title":"Added"},{"location":"CHANGELOG.html#changed_1","text":"Updated Object Detector SD card image. Found here","title":"Changed"},{"location":"CHANGELOG.html#030-392019","text":"","title":"0.3.0 - 3/9/2019"},{"location":"CHANGELOG.html#added_2","text":"Initial release with JetPack 4.2 SD card image. Found here","title":"Added"},{"location":"CONTRIBUTING.html","text":"Contributing Documenting We use mkdocs-material to easily generate documentation from markdown. Installing Dependencies sydo apt-get update sudo apt-get -y install python3-pip sudo apt-get -y install mkdocs pip3 install mkdocs-material mike Testing To quickly test the version of the documentation you're using, without commiting anything to the gh-pages branch, run the following command. mkdocs serve --dev-addr = 0 .0.0.0:8000 Deploying We use mike to maintain multiple versions of the documentation. To build the documentation with mike, call mike deploy <tag> This will build the documentation, and add a static version of the site under the gh-pages branch. For example, to deploy the master documentation we do mike deploy master To set the default documentation version to master we would do. mike set-default master To push the documentation to Github Pages. mike deploy master --push Adding a new page Mkdocs looks for documentation under the docs folder. To add a new documentation page, you will need to first add the file either directly to the docs folder, or to a different folder with a symbolic link to the docs folder. For example, say we wanted to add a page named MAINTAINERS.md to the root of the project First, we create the file at the root of the project touch MAINTAINERS.md Next, we add a symbolic link to the docs folder cd docs/reference ln -s ../../MAINTAINERS.md . Finally, we add the file to our navigation in mkdocs.yml - nav : - Reference : - 'Maintainers' : reference/MAINTAINERS.md Now, when you build the documentation you should see the page that we've added in the \"Reference\" section with the title \"Maintainers\". Updating the Changelog We follow the guidance of Keep a Changelog for best practices in maintaining a chronological human-readable CHANGELOG.md file. If the change is worth developers and users knowing about, consider adding an entry to the change log.","title":"Contributing"},{"location":"CONTRIBUTING.html#contributing","text":"","title":"Contributing"},{"location":"CONTRIBUTING.html#documenting","text":"We use mkdocs-material to easily generate documentation from markdown.","title":"Documenting"},{"location":"CONTRIBUTING.html#installing-dependencies","text":"sydo apt-get update sudo apt-get -y install python3-pip sudo apt-get -y install mkdocs pip3 install mkdocs-material mike","title":"Installing Dependencies"},{"location":"CONTRIBUTING.html#testing","text":"To quickly test the version of the documentation you're using, without commiting anything to the gh-pages branch, run the following command. mkdocs serve --dev-addr = 0 .0.0.0:8000","title":"Testing"},{"location":"CONTRIBUTING.html#deploying","text":"We use mike to maintain multiple versions of the documentation. To build the documentation with mike, call mike deploy <tag> This will build the documentation, and add a static version of the site under the gh-pages branch. For example, to deploy the master documentation we do mike deploy master To set the default documentation version to master we would do. mike set-default master To push the documentation to Github Pages. mike deploy master --push","title":"Deploying"},{"location":"CONTRIBUTING.html#adding-a-new-page","text":"Mkdocs looks for documentation under the docs folder. To add a new documentation page, you will need to first add the file either directly to the docs folder, or to a different folder with a symbolic link to the docs folder. For example, say we wanted to add a page named MAINTAINERS.md to the root of the project First, we create the file at the root of the project touch MAINTAINERS.md Next, we add a symbolic link to the docs folder cd docs/reference ln -s ../../MAINTAINERS.md . Finally, we add the file to our navigation in mkdocs.yml - nav : - Reference : - 'Maintainers' : reference/MAINTAINERS.md Now, when you build the documentation you should see the page that we've added in the \"Reference\" section with the title \"Maintainers\".","title":"Adding a new page"},{"location":"CONTRIBUTING.html#updating-the-changelog","text":"We follow the guidance of Keep a Changelog for best practices in maintaining a chronological human-readable CHANGELOG.md file. If the change is worth developers and users knowing about, consider adding an entry to the change log.","title":"Updating the Changelog"},{"location":"bill_of_materials.html","text":"This page lists everything you need to build JetBot, along with purchasing links from popular vendors. Some of the parts are 3D printed. We provide the STL files needed to print these parts. Please see our 3d printing page for tips on printing. Common parts You need these components for each JetBot. Part Quantity Cost URL Notes Jetson Nano 1 $99.00 NVIDIA Micro SD card 1 $13.99 Amazon 64GB Power supply 1 $7.50 Adafruit Micro USB, 5V, 2.5A Motor 2 $5.90 Adafruit , Amazon(1) , Amazon(2) \"TT\" form factor Motor Driver 1 $19.95 Adafruit , Amazon Caster ball 1 $6.30 Amazon 1-inch diameter Battery 1 $15.99 Amazon 2x 5V/3A output, 10,000mAh USB cable pack 1 $6.99 Amazon Type A to Micro, right angle PiOLED display 1 $14.95 Adafruit , Amazon PiOLED header 1 $5.95 Adafruit , Amazon , Sparkfun 2x(3+) right angle male Chassis 1 -- STL file see 3D printing Camera Mount 1 -- STL file see 3D printing Camera You need a camera with appropriate sensor and field of view for each JetBot. Select an option and get the parts specified. Option 1 (default) - Leopard Imaging Camera Part Quantity Cost URL Notes Camera 1 $29.00 Leopard Imaging LI-IMX219-MIPI-FF-NANO- H145 Option 2 - IMX219-160 Camera Part Quantity Cost URL Notes Camera 1 $29.90 Amazon IMX219-160 Camera Option 3 - RPi Camera V2 + Lens Attachment Part Quantity Cost URL Notes Camera 1 $23.90 Amazon , Adafruit Raspberry Pi Camera V2 Camera lens attachment 1 $18.99 Amazon(1) , Amazon(2) , eBay 160-degree FoV WiFi You need a WiFi solution for each JetBot. Select an option and get the parts specified. Option 1 (default) - M2 Card + Antennas This option is a good choice if you're building JetBot with the original Jetson Nano 4GB. It has been widely tested and used for JetBot. Attention Jetson Nano 2GB does not have a M.2 connector, so this option will not work with it. Part Quantity Cost URL Notes WiFi card 1 $18.95 Amazon , NewEgg M2, Intel Wireless-AC 8265 WiFi antenna 2 $5.06 Arrow U.FL connectors Option 2 - USB Dongle This option is compatible with both the original Jetson Nano (4GB) and Jetson Nano 2GB. Part Quantity Cost URL Notes WiFi Dongle - TP-Link Archer T2U Nano 1 $17.99 Amazon RTL8811AU chipset WiFi Dongle - TP-Link Archer T2U Plus 1 $19.99 Amazon RTL8811AU chipset Info For other possible USB Wi-fi dongles that you can use on Jetson Nano, please check the Suported Components List. Jetson Nano 2GB Developer Kit User Guide - Supported Component List Wheels You need wheels with a \"TT\" motor shaft connector for each JetBot. Select an option and get the parts specified. Option 1 - 60mm Part Quantity Cost URL Notes Wheel 2 $5.00 Adafruit 60mm diameter Caster base 1 -- STL file for 60mm wheel Caster shroud 1 -- STL file for 60mm wheel Option 2 - 65mm Part Quantity Cost URL Notes Wheel 2 $3.00 Adafruit 65mm diameter Caster base 1 -- STL file for 65mm wheel Caster shroud 1 -- STL file for 65mm wheel Assembly Hardware You need the following parts to build JetBot. They come in packs, so order the quantity you need for the number of JetBots you are going to build. Part Qty per JetBot Qty per pack Cost per JetBot URL Notes Adhesive pads 2 48 $0.14 Amazon M2 screw 20 100 $1.29 Amazon 8mm long, self tapping M3 screw 4 60 $0.47 Amazon 25mm long M3 nut 4 100 $0.24 Amazon Jumper wires 4 40 $0.13 Amazon Female-female, ~20cm","title":"Bill of Materials"},{"location":"bill_of_materials.html#common-parts","text":"You need these components for each JetBot. Part Quantity Cost URL Notes Jetson Nano 1 $99.00 NVIDIA Micro SD card 1 $13.99 Amazon 64GB Power supply 1 $7.50 Adafruit Micro USB, 5V, 2.5A Motor 2 $5.90 Adafruit , Amazon(1) , Amazon(2) \"TT\" form factor Motor Driver 1 $19.95 Adafruit , Amazon Caster ball 1 $6.30 Amazon 1-inch diameter Battery 1 $15.99 Amazon 2x 5V/3A output, 10,000mAh USB cable pack 1 $6.99 Amazon Type A to Micro, right angle PiOLED display 1 $14.95 Adafruit , Amazon PiOLED header 1 $5.95 Adafruit , Amazon , Sparkfun 2x(3+) right angle male Chassis 1 -- STL file see 3D printing Camera Mount 1 -- STL file see 3D printing","title":"Common parts"},{"location":"bill_of_materials.html#camera","text":"You need a camera with appropriate sensor and field of view for each JetBot. Select an option and get the parts specified.","title":"Camera"},{"location":"bill_of_materials.html#option-1-default-leopard-imaging-camera","text":"Part Quantity Cost URL Notes Camera 1 $29.00 Leopard Imaging LI-IMX219-MIPI-FF-NANO- H145","title":"Option 1 (default) - Leopard Imaging Camera"},{"location":"bill_of_materials.html#option-2-imx219-160-camera","text":"Part Quantity Cost URL Notes Camera 1 $29.90 Amazon IMX219-160 Camera","title":"Option 2 - IMX219-160 Camera"},{"location":"bill_of_materials.html#option-3-rpi-camera-v2-lens-attachment","text":"Part Quantity Cost URL Notes Camera 1 $23.90 Amazon , Adafruit Raspberry Pi Camera V2 Camera lens attachment 1 $18.99 Amazon(1) , Amazon(2) , eBay 160-degree FoV","title":"Option 3 - RPi Camera V2 + Lens Attachment"},{"location":"bill_of_materials.html#wifi","text":"You need a WiFi solution for each JetBot. Select an option and get the parts specified.","title":"WiFi"},{"location":"bill_of_materials.html#option-1-default-m2-card-antennas","text":"This option is a good choice if you're building JetBot with the original Jetson Nano 4GB. It has been widely tested and used for JetBot. Attention Jetson Nano 2GB does not have a M.2 connector, so this option will not work with it. Part Quantity Cost URL Notes WiFi card 1 $18.95 Amazon , NewEgg M2, Intel Wireless-AC 8265 WiFi antenna 2 $5.06 Arrow U.FL connectors","title":"Option 1 (default) - M2 Card + Antennas"},{"location":"bill_of_materials.html#option-2-usb-dongle","text":"This option is compatible with both the original Jetson Nano (4GB) and Jetson Nano 2GB. Part Quantity Cost URL Notes WiFi Dongle - TP-Link Archer T2U Nano 1 $17.99 Amazon RTL8811AU chipset WiFi Dongle - TP-Link Archer T2U Plus 1 $19.99 Amazon RTL8811AU chipset Info For other possible USB Wi-fi dongles that you can use on Jetson Nano, please check the Suported Components List. Jetson Nano 2GB Developer Kit User Guide - Supported Component List","title":"Option 2 - USB Dongle"},{"location":"bill_of_materials.html#wheels","text":"You need wheels with a \"TT\" motor shaft connector for each JetBot. Select an option and get the parts specified.","title":"Wheels"},{"location":"bill_of_materials.html#option-1-60mm","text":"Part Quantity Cost URL Notes Wheel 2 $5.00 Adafruit 60mm diameter Caster base 1 -- STL file for 60mm wheel Caster shroud 1 -- STL file for 60mm wheel","title":"Option 1 - 60mm"},{"location":"bill_of_materials.html#option-2-65mm","text":"Part Quantity Cost URL Notes Wheel 2 $3.00 Adafruit 65mm diameter Caster base 1 -- STL file for 65mm wheel Caster shroud 1 -- STL file for 65mm wheel","title":"Option 2 - 65mm"},{"location":"bill_of_materials.html#assembly-hardware","text":"You need the following parts to build JetBot. They come in packs, so order the quantity you need for the number of JetBots you are going to build. Part Qty per JetBot Qty per pack Cost per JetBot URL Notes Adhesive pads 2 48 $0.14 Amazon M2 screw 20 100 $1.29 Amazon 8mm long, self tapping M3 screw 4 60 $0.47 Amazon 25mm long M3 nut 4 100 $0.24 Amazon Jumper wires 4 40 $0.13 Amazon Female-female, ~20cm","title":"Assembly Hardware"},{"location":"getting_started.html","text":"Getting Started Step 1 - Pick your vehicle! To get started with JetBot, first pick your vehicle (hardware) you want to make. For details of NVIDIA-designed open-source JetBot hardware, check Bill of Materials page and Hardware Setup page. To find kits available from third parties, check Third Party Kits page. Step 2 - Setup your JetBot After you've decided which vehicle you want to build, you'll need to source the parts and follow the setup instructions. After that, you're ready to move on to the JetBot examples! Option 1 - DIY JetBot Kit To get started with the DIY open-source JetBot, follow these steps. Get the parts from the bill of materials . Follow the hardware setup Follow the software setup Option 2 - Third Party JetBot Kit Third party JetBot kits may have different setup instructions from the DIY JetBot. To get started with a third party jetbot, we recommend referring to the third party kit's setup instructions for details on how to setup. Check out the Third Party Kits page for links and information related to third party kits. Step 3 - Follow the examples JetBot comes with many examples to teach robotics and AI basics. These give you the experience you need to begin exploring your own applications with JetBot. Example 1 - Basic Motion The Basic Motion example teaches you how to program JetBot from your web browser with basic motor controls. Example 2 - Teleoperation The Teleoperation example teaches you how to stream live images from JetBot and control JetBot with a gamepad attached to your laptop. Example 3 - Collision Avoidance The Collision Avoidance example teaches you how to collect data and train a custom Image Classification model to enable JetBot to avoid collisions in a variety of scenarios. The method learned here can be extended to recognize arbitrary classes of image, which can be extended far beyond JetBot! Example 4 - Road Following The Road Following example teaches you how to collect data and train a custom Image Regression model to enable JetBot to follow a road. The method learned here can be extended to detect an arbitrary x, y coordinate in an image, which extends far beyond JetBot! Example 5 - Object Following The Object Following teaches you how to use a pre-trained object detection model for following an object, like a person, cup, or dog. The pre-trained network you'll learn to use here can be used for a variety of new AI projects. And more! Take the examples, modify them, make JetBot do something new, or create an entirely new AI project of your own. If you do something cool with JetBot, let us know! Happy JetBotting :)","title":"Getting Started"},{"location":"getting_started.html#getting-started","text":"","title":"Getting Started"},{"location":"getting_started.html#step-1-pick-your-vehicle","text":"To get started with JetBot, first pick your vehicle (hardware) you want to make. For details of NVIDIA-designed open-source JetBot hardware, check Bill of Materials page and Hardware Setup page. To find kits available from third parties, check Third Party Kits page.","title":"Step 1 - Pick your vehicle!"},{"location":"getting_started.html#step-2-setup-your-jetbot","text":"After you've decided which vehicle you want to build, you'll need to source the parts and follow the setup instructions. After that, you're ready to move on to the JetBot examples!","title":"Step 2 - Setup your JetBot"},{"location":"getting_started.html#option-1-diy-jetbot-kit","text":"To get started with the DIY open-source JetBot, follow these steps. Get the parts from the bill of materials . Follow the hardware setup Follow the software setup","title":"Option 1 - DIY JetBot Kit"},{"location":"getting_started.html#option-2-third-party-jetbot-kit","text":"Third party JetBot kits may have different setup instructions from the DIY JetBot. To get started with a third party jetbot, we recommend referring to the third party kit's setup instructions for details on how to setup. Check out the Third Party Kits page for links and information related to third party kits.","title":"Option 2 - Third Party JetBot Kit"},{"location":"getting_started.html#step-3-follow-the-examples","text":"JetBot comes with many examples to teach robotics and AI basics. These give you the experience you need to begin exploring your own applications with JetBot.","title":"Step 3 - Follow the examples"},{"location":"getting_started.html#example-1-basic-motion","text":"The Basic Motion example teaches you how to program JetBot from your web browser with basic motor controls.","title":"Example 1 - Basic Motion"},{"location":"getting_started.html#example-2-teleoperation","text":"The Teleoperation example teaches you how to stream live images from JetBot and control JetBot with a gamepad attached to your laptop.","title":"Example 2 - Teleoperation"},{"location":"getting_started.html#example-3-collision-avoidance","text":"The Collision Avoidance example teaches you how to collect data and train a custom Image Classification model to enable JetBot to avoid collisions in a variety of scenarios. The method learned here can be extended to recognize arbitrary classes of image, which can be extended far beyond JetBot!","title":"Example 3 - Collision Avoidance"},{"location":"getting_started.html#example-4-road-following","text":"The Road Following example teaches you how to collect data and train a custom Image Regression model to enable JetBot to follow a road. The method learned here can be extended to detect an arbitrary x, y coordinate in an image, which extends far beyond JetBot!","title":"Example 4 - Road Following"},{"location":"getting_started.html#example-5-object-following","text":"The Object Following teaches you how to use a pre-trained object detection model for following an object, like a person, cup, or dog. The pre-trained network you'll learn to use here can be used for a variety of new AI projects.","title":"Example 5 - Object Following"},{"location":"getting_started.html#and-more","text":"Take the examples, modify them, make JetBot do something new, or create an entirely new AI project of your own. If you do something cool with JetBot, let us know! Happy JetBotting :)","title":"And more!"},{"location":"hardware_setup.html","text":"This page details the hardware setup instructions for creating JetBot Tools needed To build JetBot you'll need the following tools Pliers Wire flush cutters/wire stripper Phillips screwdriver (+ Hex screwdriver for M2 hex socket screws ) Soldering iron and solder (optional) Precision Electronics Tweezers Assembly Step 1 - Clean 3D printed parts Remove support material from motor sockets using pliers Remove support material from all surfaces, openings and screw holes using pliers, tweezers, and/or fingernails File material from openings if they are too tight Step 2 - Mount motors Cut and remove the zip tie from each motor Tuck the wires beneath transparent band to prevent stress on solder joints Insert each motor into the 3D printed chassis Secure each motor with 2x M3x25mm screws Step 3 - Solder motor driver Break away 3-pin and 2-pin male headers from header link that comes with motor driver package Join two of the screw terminal blocks to create a 4-pin screw terminal Solder the 2-pin and 4-pin screw terminals to motor driver Solder the 2-pin and 3-pin male headers to motor driver Warning Pay careful attention to the position of the 3-pin header. It is offset by 1-pin from the corner. Step 4 - Strip motor driver power cable Select the depicted micro USB from the pack Warning Pay careful attention to the image. The cables are not identical. The other micro USB cable will be used to power the Jetson Nano. Using the wrong power cable for Nano will block it's Ethernet port. Cut the depicted cable roughly ~20cm from the type-A terminal Strip the rubber coating ~3cm from the cut Remove the green / white wires and metal shielding. Strip the red and black wires about ~5mm from cut (optional) Twist the exposed strand wire and coat with solder Step 5 - Mount motor driver Route the spliced cable through chassis Secure exposed red (+) and black (-) wires to the power terminals on motor driver Warning Pay attention to the markings on the motor driver. Incorrect wiring could damage the driver. Route the spliced cable under the motor driver to organize and prevent stress on screw terminal Secure motor driver to chassis using self taping screws Secure left and right motor wires to motor screw terminals Info Notice (3/11/2019): We made a slight mistake: the red and black wires for the left and right motor are actually flipped in the image shown above. This will not cause damage, but the motors will spin backwards. Please flip them to the correct orientation. Step 6 - Mount WiFi antennas Skip this step if you are using a USB WiFi dongle instead of the M.2 WiFi module Secure one patch antenna to the underside of top plate Secure the other patch antenna at edge of battery bay Route connectors as shown Step 7 - Remove Jetson Nano module from developer kit Skip this step if you are using a USB WiFi dongle instead of the M.2 WiFi module Remove standoff screws from Jetson Nano module Release the side latches of SODIMM connector using hands Slide Jetson Nano module out of SODIMM connector Step 8 - Attach WiFi module to developer kit Skip this step if you are using a USB WiFi dongle instead of the M.2 WiFi module Attach developer kit to chassis using self taping screws Snap antennae on to WiFi module using fingers Remove the screw from developer kit by the M.2 socket Insert WiFi module into M.2 slot on developer kit Fasten WiFi module to developer kit with screw removed in (3) Re-attach the Jetson Nano module to developer kit Step 9 - Mount ball caster Place the caster ball inside of shroud Insert the caster base into shroud, securing the ball Tip Depending on how the print turns out, the ball socket enclosure may fit too tight. If this is the case, you can easily use a file to remove some excess material. Attach the assembled caster onto the chassis with self taping screws Step 10 - Solder header onto PiOLED display Secure the 6-pin right angle header to PiOLED display by some method Solder the pins depicted (3.3V, SDA, SCL, and GND solder seen when zoomed in on right image) Warning The pins are close to the display screen, be careful to avoid the screen with soldering iron tip. Step 11 - Wire motor driver to PiOLED display Select 4 wire segment of female-female jumper cables. Info We use brown, red, orange, yellow segment. You can map the colors accordingly. Attach 3.3V (red), GND (brown), SDA (orange), and SCL (yellow) to motor driver as shown Route the 4 wire jumper cable segment through chassis Attach red, brown, orange and yellow wires to right angle header as depicted Warning Pay close attention! Reversing the red / brown wires could damage the system. Step 12 - Mount camera Attach the camera to the camera mount using 4x self tapping screws Attach the camera mount to chassis with 4x self tapping screws Insert the other end of ribbon cable into Jetson Nano developer kit (optional) Tuck the ribbon cable against heat sink to organize Step 13 - Attach wide angle sensor Peel off the original camera sensor Remove any excess adhesive material Remove the adhesive film cover from wide angle replacement sensor Attach wide angle replacement sensor to camera module Ensure the sensor connector is fastened to camera module Step 14 - Mount battery Attach double sided adhesive tabs to each end of battery, leaving some tab exposed Holding robot upside down, slide battery into battery bay Holding the battery in place, flip the robot and secure battery to chassis Step 15 - Organize wires Route USB cables through chassis to organize and prevent dragging Finished JetBot Once finished, your JetBot should look similar to this.","title":"Hardware Setup"},{"location":"hardware_setup.html#tools-needed","text":"To build JetBot you'll need the following tools Pliers Wire flush cutters/wire stripper Phillips screwdriver (+ Hex screwdriver for M2 hex socket screws ) Soldering iron and solder (optional) Precision Electronics Tweezers","title":"Tools needed"},{"location":"hardware_setup.html#assembly","text":"","title":"Assembly"},{"location":"hardware_setup.html#step-1-clean-3d-printed-parts","text":"Remove support material from motor sockets using pliers Remove support material from all surfaces, openings and screw holes using pliers, tweezers, and/or fingernails File material from openings if they are too tight","title":"Step 1 - Clean 3D printed parts"},{"location":"hardware_setup.html#step-2-mount-motors","text":"Cut and remove the zip tie from each motor Tuck the wires beneath transparent band to prevent stress on solder joints Insert each motor into the 3D printed chassis Secure each motor with 2x M3x25mm screws","title":"Step 2 - Mount motors"},{"location":"hardware_setup.html#step-3-solder-motor-driver","text":"Break away 3-pin and 2-pin male headers from header link that comes with motor driver package Join two of the screw terminal blocks to create a 4-pin screw terminal Solder the 2-pin and 4-pin screw terminals to motor driver Solder the 2-pin and 3-pin male headers to motor driver Warning Pay careful attention to the position of the 3-pin header. It is offset by 1-pin from the corner.","title":"Step 3 - Solder motor driver"},{"location":"hardware_setup.html#step-4-strip-motor-driver-power-cable","text":"Select the depicted micro USB from the pack Warning Pay careful attention to the image. The cables are not identical. The other micro USB cable will be used to power the Jetson Nano. Using the wrong power cable for Nano will block it's Ethernet port. Cut the depicted cable roughly ~20cm from the type-A terminal Strip the rubber coating ~3cm from the cut Remove the green / white wires and metal shielding. Strip the red and black wires about ~5mm from cut (optional) Twist the exposed strand wire and coat with solder","title":"Step 4 - Strip motor driver power cable"},{"location":"hardware_setup.html#step-5-mount-motor-driver","text":"Route the spliced cable through chassis Secure exposed red (+) and black (-) wires to the power terminals on motor driver Warning Pay attention to the markings on the motor driver. Incorrect wiring could damage the driver. Route the spliced cable under the motor driver to organize and prevent stress on screw terminal Secure motor driver to chassis using self taping screws Secure left and right motor wires to motor screw terminals Info Notice (3/11/2019): We made a slight mistake: the red and black wires for the left and right motor are actually flipped in the image shown above. This will not cause damage, but the motors will spin backwards. Please flip them to the correct orientation.","title":"Step 5 - Mount motor driver"},{"location":"hardware_setup.html#step-6-mount-wifi-antennas","text":"Skip this step if you are using a USB WiFi dongle instead of the M.2 WiFi module Secure one patch antenna to the underside of top plate Secure the other patch antenna at edge of battery bay Route connectors as shown","title":"Step 6 - Mount WiFi antennas"},{"location":"hardware_setup.html#step-7-remove-jetson-nano-module-from-developer-kit","text":"Skip this step if you are using a USB WiFi dongle instead of the M.2 WiFi module Remove standoff screws from Jetson Nano module Release the side latches of SODIMM connector using hands Slide Jetson Nano module out of SODIMM connector","title":"Step 7 - Remove Jetson Nano module from developer kit"},{"location":"hardware_setup.html#step-8-attach-wifi-module-to-developer-kit","text":"Skip this step if you are using a USB WiFi dongle instead of the M.2 WiFi module Attach developer kit to chassis using self taping screws Snap antennae on to WiFi module using fingers Remove the screw from developer kit by the M.2 socket Insert WiFi module into M.2 slot on developer kit Fasten WiFi module to developer kit with screw removed in (3) Re-attach the Jetson Nano module to developer kit","title":"Step 8 - Attach WiFi module to developer kit"},{"location":"hardware_setup.html#step-9-mount-ball-caster","text":"Place the caster ball inside of shroud Insert the caster base into shroud, securing the ball Tip Depending on how the print turns out, the ball socket enclosure may fit too tight. If this is the case, you can easily use a file to remove some excess material. Attach the assembled caster onto the chassis with self taping screws","title":"Step 9 - Mount ball caster"},{"location":"hardware_setup.html#step-10-solder-header-onto-pioled-display","text":"Secure the 6-pin right angle header to PiOLED display by some method Solder the pins depicted (3.3V, SDA, SCL, and GND solder seen when zoomed in on right image) Warning The pins are close to the display screen, be careful to avoid the screen with soldering iron tip.","title":"Step 10 - Solder header onto PiOLED display"},{"location":"hardware_setup.html#step-11-wire-motor-driver-to-pioled-display","text":"Select 4 wire segment of female-female jumper cables. Info We use brown, red, orange, yellow segment. You can map the colors accordingly. Attach 3.3V (red), GND (brown), SDA (orange), and SCL (yellow) to motor driver as shown Route the 4 wire jumper cable segment through chassis Attach red, brown, orange and yellow wires to right angle header as depicted Warning Pay close attention! Reversing the red / brown wires could damage the system.","title":"Step 11 - Wire motor driver to PiOLED display"},{"location":"hardware_setup.html#step-12-mount-camera","text":"Attach the camera to the camera mount using 4x self tapping screws Attach the camera mount to chassis with 4x self tapping screws Insert the other end of ribbon cable into Jetson Nano developer kit (optional) Tuck the ribbon cable against heat sink to organize","title":"Step 12 - Mount camera"},{"location":"hardware_setup.html#step-13-attach-wide-angle-sensor","text":"Peel off the original camera sensor Remove any excess adhesive material Remove the adhesive film cover from wide angle replacement sensor Attach wide angle replacement sensor to camera module Ensure the sensor connector is fastened to camera module","title":"Step 13 - Attach wide angle sensor"},{"location":"hardware_setup.html#step-14-mount-battery","text":"Attach double sided adhesive tabs to each end of battery, leaving some tab exposed Holding robot upside down, slide battery into battery bay Holding the battery in place, flip the robot and secure battery to chassis","title":"Step 14 - Mount battery"},{"location":"hardware_setup.html#step-15-organize-wires","text":"Route USB cables through chassis to organize and prevent dragging","title":"Step 15 - Organize wires"},{"location":"hardware_setup.html#finished-jetbot","text":"Once finished, your JetBot should look similar to this.","title":"Finished JetBot"},{"location":"third_party_kits.html","text":"Third Party Kits In addition to the open-source DIY version, several third party JetBot kits using Jetson Nano have emerged. This page details the kits that we're aware of Note Please note, we do not officially maintain these kits in this GitHub project. Please refer to the vendor's documentation. Please refer to the vendor URL for cost and availability. Some kits may have additional vendors that we aren't aware of or haven't listed yet. If you think these would be helpful for other developers to know, please let us know . Waveshare JetBot Kit URL WaveShare JetBot Kit Amazon.com , Waveshare.com , Waveshare.net(\u4e2d\u6587) WaveShare JetBot Kit (includes Jetson Nano Dev Kit) Amazon.com , Waveshare.com , Waveshare.net(\u4e2d\u6587) Links JetBot AI Kit Assemble Manual JetBot AI Kit JetBot AI Kit (\u4e2d\u6587) SparkFun JetBot Kit URL SparkFun JetBot AI Kit v2.1 SparkFun SparkFun JetBot AI Kit v2.1 (includes Jetson Nano Dev Kit) SparkFun Links Assembly Guide for SparkFun JetBot AI Kit V2.0 Seeedstudio JetBot Kit URL Seeedstudio JetBot Smart Car Kit Seeedstudio Seeedstudio JetBot Smart Car Kit (includes Jetson Nano Dev Kit) Seeedstudio Links Seeedstudio JetBot Wiring Guide Seeedstudio JetBot Setup Guide Silicon Highway JetBot Kit URL Silicon Highway JetBot Kit Silicon Highway (UK) FaBo JetBot Kit URL FaBo JetBot Kit (with Jetson Nano Dev Kit) FaBo store (Japan) Links JetBot Kit \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb GPUS JetBot Kit URL GPUS JetBot Kit (with Jetson Nano Dev Kit) Taobao","title":"Third Party Kits"},{"location":"third_party_kits.html#third-party-kits","text":"In addition to the open-source DIY version, several third party JetBot kits using Jetson Nano have emerged. This page details the kits that we're aware of Note Please note, we do not officially maintain these kits in this GitHub project. Please refer to the vendor's documentation. Please refer to the vendor URL for cost and availability. Some kits may have additional vendors that we aren't aware of or haven't listed yet. If you think these would be helpful for other developers to know, please let us know .","title":"Third Party Kits"},{"location":"third_party_kits.html#waveshare-jetbot","text":"Kit URL WaveShare JetBot Kit Amazon.com , Waveshare.com , Waveshare.net(\u4e2d\u6587) WaveShare JetBot Kit (includes Jetson Nano Dev Kit) Amazon.com , Waveshare.com , Waveshare.net(\u4e2d\u6587)","title":"Waveshare JetBot"},{"location":"third_party_kits.html#links","text":"JetBot AI Kit Assemble Manual JetBot AI Kit JetBot AI Kit (\u4e2d\u6587)","title":"Links"},{"location":"third_party_kits.html#sparkfun-jetbot","text":"Kit URL SparkFun JetBot AI Kit v2.1 SparkFun SparkFun JetBot AI Kit v2.1 (includes Jetson Nano Dev Kit) SparkFun","title":"SparkFun JetBot"},{"location":"third_party_kits.html#links_1","text":"Assembly Guide for SparkFun JetBot AI Kit V2.0","title":"Links"},{"location":"third_party_kits.html#seeedstudio-jetbot","text":"Kit URL Seeedstudio JetBot Smart Car Kit Seeedstudio Seeedstudio JetBot Smart Car Kit (includes Jetson Nano Dev Kit) Seeedstudio","title":"Seeedstudio JetBot"},{"location":"third_party_kits.html#links_2","text":"Seeedstudio JetBot Wiring Guide Seeedstudio JetBot Setup Guide","title":"Links"},{"location":"third_party_kits.html#silicon-highway-jetbot","text":"Kit URL Silicon Highway JetBot Kit Silicon Highway (UK)","title":"Silicon Highway JetBot"},{"location":"third_party_kits.html#fabo-jetbot","text":"Kit URL FaBo JetBot Kit (with Jetson Nano Dev Kit) FaBo store (Japan)","title":"FaBo JetBot"},{"location":"third_party_kits.html#links_3","text":"JetBot Kit \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb","title":"Links"},{"location":"third_party_kits.html#gpus-jetbot","text":"Kit URL GPUS JetBot Kit (with Jetson Nano Dev Kit) Taobao","title":"GPUS JetBot"},{"location":"examples/basic_motion.html","text":"Basic Motion In this notebook we'll control JetBot by programming from a web browser. Connect to your robot by navigating to http://<jetbot_ip_address>:8888 Sign in with the default password jetbot Navigate to ~/Notebooks/basic_motion/ Open and follow the basic_motion.ipynb notebook Caution JetBot will physically move in this notebook, make sure it has enough space to move around.","title":"Basic Motion"},{"location":"examples/basic_motion.html#basic-motion","text":"In this notebook we'll control JetBot by programming from a web browser. Connect to your robot by navigating to http://<jetbot_ip_address>:8888 Sign in with the default password jetbot Navigate to ~/Notebooks/basic_motion/ Open and follow the basic_motion.ipynb notebook Caution JetBot will physically move in this notebook, make sure it has enough space to move around.","title":"Basic Motion"},{"location":"examples/collision_avoidance.html","text":"Collision Avoidance In this example we'll collect an image classification dataset that will be used to help keep JetBot safe! We'll teach JetBot to detect two scenarios free and blocked . We'll use this AI classifier to prevent JetBot from entering dangerous territory. Step 1 - Collect data on JetBot Connect to your robot by navigating to http://<jetbot_ip_address>:8888 Sign in with the default password jetbot Shutdown all other running notebooks by selecting Kernel -> Shutdown All Kernels... Navigate to ~/Notebooks/collision_avoidance/ Open and follow the data_collection.ipynb notebook Tip We provide a pre-trained model so you can skip to step 3 if desired. This model was trained on a limited dataset using the Raspberry Pi V2 Camera with wide angle attachment. Step 2 - Train neural network Option 1 - Train on Jetson Nano Connect to your robot by navigating to http://<jetbot_ip_address>:8888 Sign in with the default password jetbot In the Jupyter Lab tab, navigate to ~/collision_avoidance Open and follow the train_model_resnet18.ipynb notebook Option 2 - Train on other GPU machine Connect to a GPU machine with PyTorch installed and a Jupyter Lab server running Upload the collision avoidance training notebook to this machine Open and follow the train_model_resnet18.ipynb notebook Step 3 - Optimize the model on Jetson Nano Connect to your robot by navigating to https://<jetbot_ip_address>:8888 Sign in with the default password jetbot Shutdown all other running notebooks by selecting Kernel -> Shutdown All Kernels... Navigate to ~/Notebooks/road_following Open and follow the live_demo_resnet18_build_trt.ipynb notebook to optimize the model with TensorRT Step 4 - Run live demo on JetBot Connect to your robot by navigating to http://<jetbot_ip_address>:8888 Sign in with the default password jetbot Shutdown all other running notebooks by selecting Kernel -> Shutdown All Kernels... Navigate to ~/Notebooks/collision_avoidance Open and follow the live_demo_resnet18_trt.ipynb notebook to run the optimized model Caution JetBot will physically move in this notebook, make sure it has enough space to move around.","title":"Collision Avoidance"},{"location":"examples/collision_avoidance.html#collision-avoidance","text":"In this example we'll collect an image classification dataset that will be used to help keep JetBot safe! We'll teach JetBot to detect two scenarios free and blocked . We'll use this AI classifier to prevent JetBot from entering dangerous territory.","title":"Collision Avoidance"},{"location":"examples/collision_avoidance.html#step-1-collect-data-on-jetbot","text":"Connect to your robot by navigating to http://<jetbot_ip_address>:8888 Sign in with the default password jetbot Shutdown all other running notebooks by selecting Kernel -> Shutdown All Kernels... Navigate to ~/Notebooks/collision_avoidance/ Open and follow the data_collection.ipynb notebook Tip We provide a pre-trained model so you can skip to step 3 if desired. This model was trained on a limited dataset using the Raspberry Pi V2 Camera with wide angle attachment.","title":"Step 1 - Collect data on JetBot"},{"location":"examples/collision_avoidance.html#step-2-train-neural-network","text":"","title":"Step 2 - Train neural network"},{"location":"examples/collision_avoidance.html#option-1-train-on-jetson-nano","text":"Connect to your robot by navigating to http://<jetbot_ip_address>:8888 Sign in with the default password jetbot In the Jupyter Lab tab, navigate to ~/collision_avoidance Open and follow the train_model_resnet18.ipynb notebook","title":"Option 1 - Train on Jetson Nano"},{"location":"examples/collision_avoidance.html#option-2-train-on-other-gpu-machine","text":"Connect to a GPU machine with PyTorch installed and a Jupyter Lab server running Upload the collision avoidance training notebook to this machine Open and follow the train_model_resnet18.ipynb notebook","title":"Option 2 - Train on other GPU machine"},{"location":"examples/collision_avoidance.html#step-3-optimize-the-model-on-jetson-nano","text":"Connect to your robot by navigating to https://<jetbot_ip_address>:8888 Sign in with the default password jetbot Shutdown all other running notebooks by selecting Kernel -> Shutdown All Kernels... Navigate to ~/Notebooks/road_following Open and follow the live_demo_resnet18_build_trt.ipynb notebook to optimize the model with TensorRT","title":"Step 3 - Optimize the model on Jetson Nano"},{"location":"examples/collision_avoidance.html#step-4-run-live-demo-on-jetbot","text":"Connect to your robot by navigating to http://<jetbot_ip_address>:8888 Sign in with the default password jetbot Shutdown all other running notebooks by selecting Kernel -> Shutdown All Kernels... Navigate to ~/Notebooks/collision_avoidance Open and follow the live_demo_resnet18_trt.ipynb notebook to run the optimized model Caution JetBot will physically move in this notebook, make sure it has enough space to move around.","title":"Step 4 - Run live demo on JetBot"},{"location":"examples/object_following.html","text":"Object Following Attention Please note that example for now only works with the SD card image based software setup. In this example we'll have JetBot follow an object using a pre-trained model capable of detecting common objects like Person , Cup , and Dog . While doing this, JetBot will run the collision avoidance model from Example 3 to make sure it stays safe! Download the object detection model according to the table below JetBot SD Card Version Model v0.3 ssd_mobilenet_v2_coco.engine v0.4 (latest) ssd_mobilenet_v2_coco.engine Attention Please note, the latest object detection engine targets Jetson Nano running software bundled with JetPack 4.3. This engine not be compatible with other versions of JetPack. For this reason, we recommend starting from the JetPack 4.3 JetBot SD Card image, or using the JetPack 4.3 base SD card image if you want to run the object detection example. Connect to your robot by navigating to http://<jetbot_ip_address>:8888 Shutdown all other running notebooks by selecting Kernel -> Shutdown All Kernels... Navigate to ~/Notebooks/object_following/ Upload the pre-trained ssd_mobilenet_v2_coco.engine model to this folder Info This example also uses the collision avoidance model from example 3. We assume that it is already located at ~/Notebooks/collision_avoidance/best_model.pth Open and follow the live_demo.ipynb notebook Warning Start cautious and give JetBot enough space to move around.","title":"Object Following"},{"location":"examples/object_following.html#object-following","text":"Attention Please note that example for now only works with the SD card image based software setup. In this example we'll have JetBot follow an object using a pre-trained model capable of detecting common objects like Person , Cup , and Dog . While doing this, JetBot will run the collision avoidance model from Example 3 to make sure it stays safe! Download the object detection model according to the table below JetBot SD Card Version Model v0.3 ssd_mobilenet_v2_coco.engine v0.4 (latest) ssd_mobilenet_v2_coco.engine Attention Please note, the latest object detection engine targets Jetson Nano running software bundled with JetPack 4.3. This engine not be compatible with other versions of JetPack. For this reason, we recommend starting from the JetPack 4.3 JetBot SD Card image, or using the JetPack 4.3 base SD card image if you want to run the object detection example. Connect to your robot by navigating to http://<jetbot_ip_address>:8888 Shutdown all other running notebooks by selecting Kernel -> Shutdown All Kernels... Navigate to ~/Notebooks/object_following/ Upload the pre-trained ssd_mobilenet_v2_coco.engine model to this folder Info This example also uses the collision avoidance model from example 3. We assume that it is already located at ~/Notebooks/collision_avoidance/best_model.pth Open and follow the live_demo.ipynb notebook Warning Start cautious and give JetBot enough space to move around.","title":"Object Following"},{"location":"examples/road_following.html","text":"Road Following In this example we'll collect an image regression dataset that will enable JetBot to follow a road! We'll teach JetBot to detect a target x, y image coordinate that the JetBot will chase. As JetBot gets closer to the point, it moves further along the track. Step 1 - Collect data on JetBot Connect to your robot by navigating to http://<jetbot_ip_address>:8888 Sign in with the default password jetbot Shutdown all other running notebooks by selecting Kernel -> Shutdown All Kernels... Navigate to ~/Notebooks/road_following/ Open and follow the data_collection.ipynb notebook Step 2 - Train neural network Option 1 - Train on Jetson Nano Connect to your robot by navigating to http://<jetbot_ip_address>:8888 Sign in with the default password jetbot In the Jupyter Lab tab, navigate to ~/Notebooks/road_following Open and follow the train_model.ipynb notebook Option 2 - Train on other GPU machine Connect to a GPU machine with PyTorch installed and a Jupyter Lab server running Upload the road following avoidance training notebook to this machine Open and follow the train_model.ipynb notebook Step 3 - Optimize the model on Jetson Nano Connect to your robot by navigating to https://<jetbot_ip_address>:8888 Sign in with the default password jetbot Shutdown all other running notebooks by selecting Kernel -> Shutdown All Kernels... Navigate to ~/Notebooks/road_following Open and follow the live_demo_build_trt.ipynb notebook to optimize the model with TensorRT Step 4 - Run live demo on JetBot Connect to your robot by navigating to http://<jetbot_ip_address>:8888 Sign in with the default password jetbot Shutdown all other running notebooks by selecting Kernel -> Shutdown All Kernels... Navigate to ~/Notebooks/road_following Open and follow the live_demo_trt.ipynb notebook to run the optimized model Warning Start cautious and give JetBot enough space to move around.","title":"Road Following"},{"location":"examples/road_following.html#road-following","text":"In this example we'll collect an image regression dataset that will enable JetBot to follow a road! We'll teach JetBot to detect a target x, y image coordinate that the JetBot will chase. As JetBot gets closer to the point, it moves further along the track.","title":"Road Following"},{"location":"examples/road_following.html#step-1-collect-data-on-jetbot","text":"Connect to your robot by navigating to http://<jetbot_ip_address>:8888 Sign in with the default password jetbot Shutdown all other running notebooks by selecting Kernel -> Shutdown All Kernels... Navigate to ~/Notebooks/road_following/ Open and follow the data_collection.ipynb notebook","title":"Step 1 - Collect data on JetBot"},{"location":"examples/road_following.html#step-2-train-neural-network","text":"","title":"Step 2 - Train neural network"},{"location":"examples/road_following.html#option-1-train-on-jetson-nano","text":"Connect to your robot by navigating to http://<jetbot_ip_address>:8888 Sign in with the default password jetbot In the Jupyter Lab tab, navigate to ~/Notebooks/road_following Open and follow the train_model.ipynb notebook","title":"Option 1 - Train on Jetson Nano"},{"location":"examples/road_following.html#option-2-train-on-other-gpu-machine","text":"Connect to a GPU machine with PyTorch installed and a Jupyter Lab server running Upload the road following avoidance training notebook to this machine Open and follow the train_model.ipynb notebook","title":"Option 2 - Train on other GPU machine"},{"location":"examples/road_following.html#step-3-optimize-the-model-on-jetson-nano","text":"Connect to your robot by navigating to https://<jetbot_ip_address>:8888 Sign in with the default password jetbot Shutdown all other running notebooks by selecting Kernel -> Shutdown All Kernels... Navigate to ~/Notebooks/road_following Open and follow the live_demo_build_trt.ipynb notebook to optimize the model with TensorRT","title":"Step 3 - Optimize the model on Jetson Nano"},{"location":"examples/road_following.html#step-4-run-live-demo-on-jetbot","text":"Connect to your robot by navigating to http://<jetbot_ip_address>:8888 Sign in with the default password jetbot Shutdown all other running notebooks by selecting Kernel -> Shutdown All Kernels... Navigate to ~/Notebooks/road_following Open and follow the live_demo_trt.ipynb notebook to run the optimized model Warning Start cautious and give JetBot enough space to move around.","title":"Step 4 - Run live demo on JetBot"},{"location":"examples/teleoperation.html","text":"Teleoperation Info This example requires a gamepad controller connected to your laptop/workstation. In this example we'll drive JetBot remotely, view live streaming video, and save snapshots! Connect to your robot by navigating to http://<jetbot_ip_address>:8888 Sign in with the default password jetbot Shutdown all other running notebooks by selecting Kernel -> Shutdown All Kernels... Navigate to ~/Notebooks/teleoperation/ Open and follow the teleoperation.ipynb notebook","title":"Teleoperation"},{"location":"examples/teleoperation.html#teleoperation","text":"Info This example requires a gamepad controller connected to your laptop/workstation. In this example we'll drive JetBot remotely, view live streaming video, and save snapshots! Connect to your robot by navigating to http://<jetbot_ip_address>:8888 Sign in with the default password jetbot Shutdown all other running notebooks by selecting Kernel -> Shutdown All Kernels... Navigate to ~/Notebooks/teleoperation/ Open and follow the teleoperation.ipynb notebook","title":"Teleoperation"},{"location":"reference/docker_tips.html","text":"Docker Tips This page provides various information related to using docker with JetBot. Using Nvidia GPU Cloud (NGC) The standard JetBot containers are hosted on docker hub, but for development or testing purposes, you may wish to use Nvidia GPU Cloud. To access containers on NGC, you need to sign into the NGC registry. To do this: Log into ngc.nvidia.com Generated your API Key Navigate to Setup > API Key Click on \"Generate API Key\" at the right upper corner of the page Copy the API key for future use On your Jetson, sign into the NGC registry using the generated key $ sudo docker login nvcr.io Username: $oauthtoken Password: <Your Generated Key> For the username, enter $oauthtoken exactly as shown. It is a special authentication token for all users. Using custom Jupyter Lab workspace directory The argument you provide to the enable.sh script is mounted as a volume inside the docker container. Inside the docker container, this volume is located at /workspace. Any changes that you make inside this directory will be saved outside of the docker container. To use a different directory as the workspace for the Jupyter contianer, just provide the path as an argument when calling enable.sh. For example, to set the workspace to your home directory, you would do cd jetbot/docker ./enable.sh $HOME Disabling containers Once you execute the enable.sh script, the containers are set to restart automatically. This means you can shut down your Jetson, and when you reboot the containers will run and you don't need to repeat this process. To prevent the containers from starting automatically, just call the disable.sh script. cd ~/jetbot/docker ./disable.sh","title":"Docker Tips"},{"location":"reference/docker_tips.html#docker-tips","text":"This page provides various information related to using docker with JetBot.","title":"Docker Tips"},{"location":"reference/docker_tips.html#using-nvidia-gpu-cloud-ngc","text":"The standard JetBot containers are hosted on docker hub, but for development or testing purposes, you may wish to use Nvidia GPU Cloud. To access containers on NGC, you need to sign into the NGC registry. To do this: Log into ngc.nvidia.com Generated your API Key Navigate to Setup > API Key Click on \"Generate API Key\" at the right upper corner of the page Copy the API key for future use On your Jetson, sign into the NGC registry using the generated key $ sudo docker login nvcr.io Username: $oauthtoken Password: <Your Generated Key> For the username, enter $oauthtoken exactly as shown. It is a special authentication token for all users.","title":"Using Nvidia GPU Cloud (NGC)"},{"location":"reference/docker_tips.html#using-custom-jupyter-lab-workspace-directory","text":"The argument you provide to the enable.sh script is mounted as a volume inside the docker container. Inside the docker container, this volume is located at /workspace. Any changes that you make inside this directory will be saved outside of the docker container. To use a different directory as the workspace for the Jupyter contianer, just provide the path as an argument when calling enable.sh. For example, to set the workspace to your home directory, you would do cd jetbot/docker ./enable.sh $HOME","title":"Using custom Jupyter Lab workspace directory"},{"location":"reference/docker_tips.html#disabling-containers","text":"Once you execute the enable.sh script, the containers are set to restart automatically. This means you can shut down your Jetson, and when you reboot the containers will run and you don't need to repeat this process. To prevent the containers from starting automatically, just call the disable.sh script. cd ~/jetbot/docker ./disable.sh","title":"Disabling containers"},{"location":"software_setup/docker.html","text":"Software Setup (Docker) This page details how to set up JetBot using the pre-built JetBot docker containers. This is the best option if you want to use JetBot with an existing Jetson Nano SD card image. Note Please note, the JetBot containers described in this page currently target a Jetson Nano SD card image flashed with JetPack 4.4. These containers will not work with other version of JetPack. Step 1 - Setup Jetson Nano If you haven't already, go through the initial setup of Jetson Nano. You can use your existing Jetson Nano set up (microSD card), as long as you have enough storage space left. Hint For this, we'll assume you've set up your Jetson Nano using the online Getting Started guide . Getting Started With Jetson Nano Developer Kit Getting Started with Jetson Nano 2GB Developer Kit Step 2 - Connect to Wi-Fi If you haven't already, connect your Jetson Nano to your Wi-Fi network. Follow this Wi-Fi setup guide. Step 3 - Clone JetBot repo Clone the official JetBot GitHub repo . git clone http://github.com/NVIDIA-AI-IOT/jetbot.git Step 4 - Configure System First, call the scripts/configure_jetson.sh script to configure the power mode and other parameters. cd jetbot ./scripts/configure_jetson.sh Hint configure_jetson.sh also disables the GUI for the interest of saving system memory (DRAM) consumption. If you want to re-enable the GUI, you can execute the following command. sudo systemctl set-default graphical.target Optionally, you can execute this script ( ./scripts/re_enable_gui.sh ). Step 5 - Enable all containers Call the following to enable the JetBot docker containers cd docker ./enable.sh $HOME # we'll use home directory as working directory, set this as you please. Now you can go to https://<jetbot_ip>:8888 from a web browser and start programming JetBot! You can do this from any machine on your local network. The password to log in is jetbot . The enable.sh script causes the docker containers to restart at boot. This means the next time you power on your JetBot, the containers will automatically start, and you should see the IP address displayed on the PiOLED display screen. All you need to do is type this into your web browser and start programming! Tip For more information on configuring and using docker with JetBot, check out the Docker Tips page. Now that you've finished setting up you're JetBot, you're ready to run through the examples !","title":"Using Docker Container"},{"location":"software_setup/docker.html#software-setup-docker","text":"This page details how to set up JetBot using the pre-built JetBot docker containers. This is the best option if you want to use JetBot with an existing Jetson Nano SD card image. Note Please note, the JetBot containers described in this page currently target a Jetson Nano SD card image flashed with JetPack 4.4. These containers will not work with other version of JetPack.","title":"Software Setup (Docker)"},{"location":"software_setup/docker.html#step-1-setup-jetson-nano","text":"If you haven't already, go through the initial setup of Jetson Nano. You can use your existing Jetson Nano set up (microSD card), as long as you have enough storage space left. Hint For this, we'll assume you've set up your Jetson Nano using the online Getting Started guide . Getting Started With Jetson Nano Developer Kit Getting Started with Jetson Nano 2GB Developer Kit","title":"Step 1 - Setup Jetson Nano"},{"location":"software_setup/docker.html#step-2-connect-to-wi-fi","text":"If you haven't already, connect your Jetson Nano to your Wi-Fi network. Follow this Wi-Fi setup guide.","title":"Step 2 - Connect to Wi-Fi"},{"location":"software_setup/docker.html#step-3-clone-jetbot-repo","text":"Clone the official JetBot GitHub repo . git clone http://github.com/NVIDIA-AI-IOT/jetbot.git","title":"Step 3 - Clone JetBot repo"},{"location":"software_setup/docker.html#step-4-configure-system","text":"First, call the scripts/configure_jetson.sh script to configure the power mode and other parameters. cd jetbot ./scripts/configure_jetson.sh Hint configure_jetson.sh also disables the GUI for the interest of saving system memory (DRAM) consumption. If you want to re-enable the GUI, you can execute the following command. sudo systemctl set-default graphical.target Optionally, you can execute this script ( ./scripts/re_enable_gui.sh ).","title":"Step 4 - Configure System"},{"location":"software_setup/docker.html#step-5-enable-all-containers","text":"Call the following to enable the JetBot docker containers cd docker ./enable.sh $HOME # we'll use home directory as working directory, set this as you please. Now you can go to https://<jetbot_ip>:8888 from a web browser and start programming JetBot! You can do this from any machine on your local network. The password to log in is jetbot . The enable.sh script causes the docker containers to restart at boot. This means the next time you power on your JetBot, the containers will automatically start, and you should see the IP address displayed on the PiOLED display screen. All you need to do is type this into your web browser and start programming! Tip For more information on configuring and using docker with JetBot, check out the Docker Tips page. Now that you've finished setting up you're JetBot, you're ready to run through the examples !","title":"Step 5 - Enable all containers"},{"location":"software_setup/sd_card.html","text":"Software Setup (SD Card Image) This page details how to set up JetBot using the pre-built JetBot SD card image. You may prefer this option if you are new to Jetson Nano, and do not have an existing SD card configured. Step 1 - Download the pre-built JetBot SD card image Download the pre-built JetBot SD card image from the table below. Make sure to select the version that matches the Jetson you're using (for example Jetson Nano 2GB). Latest Release Platform JetPack Version JetBot Version Download Jetson Nano 2GB 4.4.1 0.4.1 jetbot-041_nano-2gb-jp441.zip Jetson Nano (4GB) 4.4.1 0.4.1 jetbot-041_nano-4gb-jp441.zip Old releases Platform JetPack Version JetBot Version Download Jetson Nano (4GB) 4.3 0.4.0 jetbot_image_v0p4p0.zip Jetson Nano (4GB) 4.2 0.3.2 jetbot_image_v0p3p2.zip Step 2 - Flash JetBot image onto SD card Insert an SD card into your desktop machine Using Etcher , select the image you downloaded above and flash it onto the SD card. Remove the SD card from your desktop machine Step 3 - Boot Jetson Nano Insert the SD card into your Jetson Nano (the micro SD card slot is located under the module) Connect the monitor, keyboard, and mouse to the Nano Power on the Jetson Nano by connecting the micro USB (for Jetson Nano (4GB)) or USB-C (for Jetson Nano 2GB) charger to the port Attention We recommend first booting the Jetson Nano once without the piOLED / motor driver connected. This way you can check to make sure the system boots properly from the SD card image without worrying about hardware issues. After you've verified that it boots, reconnect the piOLED, double check your wiring, and boot again. Step 4 - Connect JetBot to WiFi Next you'll need to connect to WiFi. To reduce memory consumption, we disable the Ubuntu GUI in the latest JetBot SD card image. For this reason, you'll need to use the command line to connect to WiFi. Log in using the user jetbot and password jetbot Connect to a WiFi network using the following command sudo nmcli device wifi connect <SSID> password <PASSWORD> Your Jetson Nano should now automatically connect to the WiFi at boot and display it's IP address on the piOLED display. Tip If you're having trouble figuring out how to get connected to Wi-Fi, check out the Wi-Fi setup page for more detailed instructions Step 5 - Connect to JetBot from web browser After your robot is connected to WiFi, you no longer need to have the robot connected by a monitor. You can connect to the robot from your laptop's web browser by performing the following steps Shutdown JetBot using the command line sudo shutdown now Unplug your HDMI monitor, USB keyboard, mouse and power supply from Jetson Nano Power the JetBot from the USB battery pack by plugging in the micro-USB cable Wait a bit for JetBot to boot Check the IP address of your robot on the piOLED display screen. Enter this in place of <jetbot_ip_address> in the next command Navigate to http://<jetbot_ip_address>:8888 from your desktop's web browser. You can do this from any machine on your local network. Sign in using the password jetbot . That's it, you've now accessed JetBot's remote programming environment! You will be presented with a view similar to the following. Here you can easily access the JetBot examples! From this point on, when you power on the JetBot, it should automatically connect to WiFi and display it's IP address. So all you need to do is reconnect using your web browser to start programming! Now that you're finished setting up your JetBot, you're ready to run the examples .","title":"Using SD Card Image"},{"location":"software_setup/sd_card.html#software-setup-sd-card-image","text":"This page details how to set up JetBot using the pre-built JetBot SD card image. You may prefer this option if you are new to Jetson Nano, and do not have an existing SD card configured.","title":"Software Setup (SD Card Image)"},{"location":"software_setup/sd_card.html#step-1-download-the-pre-built-jetbot-sd-card-image","text":"Download the pre-built JetBot SD card image from the table below. Make sure to select the version that matches the Jetson you're using (for example Jetson Nano 2GB).","title":"Step 1 - Download the pre-built JetBot SD card image"},{"location":"software_setup/sd_card.html#latest-release","text":"Platform JetPack Version JetBot Version Download Jetson Nano 2GB 4.4.1 0.4.1 jetbot-041_nano-2gb-jp441.zip Jetson Nano (4GB) 4.4.1 0.4.1 jetbot-041_nano-4gb-jp441.zip","title":"Latest Release"},{"location":"software_setup/sd_card.html#old-releases","text":"Platform JetPack Version JetBot Version Download Jetson Nano (4GB) 4.3 0.4.0 jetbot_image_v0p4p0.zip Jetson Nano (4GB) 4.2 0.3.2 jetbot_image_v0p3p2.zip","title":"Old releases"},{"location":"software_setup/sd_card.html#step-2-flash-jetbot-image-onto-sd-card","text":"Insert an SD card into your desktop machine Using Etcher , select the image you downloaded above and flash it onto the SD card. Remove the SD card from your desktop machine","title":"Step 2 - Flash JetBot image onto SD card"},{"location":"software_setup/sd_card.html#step-3-boot-jetson-nano","text":"Insert the SD card into your Jetson Nano (the micro SD card slot is located under the module) Connect the monitor, keyboard, and mouse to the Nano Power on the Jetson Nano by connecting the micro USB (for Jetson Nano (4GB)) or USB-C (for Jetson Nano 2GB) charger to the port Attention We recommend first booting the Jetson Nano once without the piOLED / motor driver connected. This way you can check to make sure the system boots properly from the SD card image without worrying about hardware issues. After you've verified that it boots, reconnect the piOLED, double check your wiring, and boot again.","title":"Step 3 - Boot Jetson Nano"},{"location":"software_setup/sd_card.html#step-4-connect-jetbot-to-wifi","text":"Next you'll need to connect to WiFi. To reduce memory consumption, we disable the Ubuntu GUI in the latest JetBot SD card image. For this reason, you'll need to use the command line to connect to WiFi. Log in using the user jetbot and password jetbot Connect to a WiFi network using the following command sudo nmcli device wifi connect <SSID> password <PASSWORD> Your Jetson Nano should now automatically connect to the WiFi at boot and display it's IP address on the piOLED display. Tip If you're having trouble figuring out how to get connected to Wi-Fi, check out the Wi-Fi setup page for more detailed instructions","title":"Step 4 - Connect JetBot to WiFi"},{"location":"software_setup/sd_card.html#step-5-connect-to-jetbot-from-web-browser","text":"After your robot is connected to WiFi, you no longer need to have the robot connected by a monitor. You can connect to the robot from your laptop's web browser by performing the following steps Shutdown JetBot using the command line sudo shutdown now Unplug your HDMI monitor, USB keyboard, mouse and power supply from Jetson Nano Power the JetBot from the USB battery pack by plugging in the micro-USB cable Wait a bit for JetBot to boot Check the IP address of your robot on the piOLED display screen. Enter this in place of <jetbot_ip_address> in the next command Navigate to http://<jetbot_ip_address>:8888 from your desktop's web browser. You can do this from any machine on your local network. Sign in using the password jetbot . That's it, you've now accessed JetBot's remote programming environment! You will be presented with a view similar to the following. Here you can easily access the JetBot examples! From this point on, when you power on the JetBot, it should automatically connect to WiFi and display it's IP address. So all you need to do is reconnect using your web browser to start programming! Now that you're finished setting up your JetBot, you're ready to run the examples .","title":"Step 5 - Connect to JetBot from web browser"},{"location":"software_setup/wifi_setup.html","text":"Wi-Fi connection setup Info You can skip this page if you already have a wireless connection to your JetBot from your computer. To go through the actual example applications on JetBot, you interact with JetBot from your (laptop) PC through Wi-Fi network. This document explains how you can initially set up the Wi-Fi connection on your Jetson. Monitor-attached Mode The easiest way to set up the Wi-Fi connection on your Jetson, is to operate on the GUI desktop. For this you need to fisrt connect the following to the Jetson on your JetBot. HDMI monitor USB keyboard USB mouse With this setup, you can use Jetson like a standard Linux computer. We call this Monitor-attached Mode . Hint If you don't have above items handy, then you can also try the headless way of configuring Wi-Fi. Head down to the next section, Headless Mode . Connect to Wi-Fi AP If a Wi-Fi adaptor (either Intel 8265 M.2 card or a USB Wi-Fi dongle) is attached, you can configure the wireless network from the desktop. Check IP address After the connection established, check the IP address. Note this IP address. Verify the IP address To test the IP address is valid and your Jetson is accesible, try connecting to the IP address from your separate (laptop) PC. SSH server is enabled by default on Jetson. Open your SSH client software (PuTTY, etc) on your PC, and try to connect the SSH server on the IP address. This is how you connect to your JetBot using SSH client software. Once you confirm you can connect to your Jetson remotely from your PC via Wi-Fi, you can now remove the HDMI monitor, keyboard and mouse from Jetson , and let your JetBot free! And at this point, you are now using Jetson effectively in the Headless Mode. Hint Alternatively, even on the GUI deskop, you can open the terminal by pressing Ctrl + Alt + T keys, and follow the command-line based setup described below for headless setup. Headless Mode When you put your Jetson in a deployed system, like a mobile robot, it is often difficult to attach an HDMI monitor. We can still control such Jetson remotely through network from a (laptop) PC, WHEN you already know the IP address . We call this operation mode Headless Mode . However you face a chiken-or-egg dillemna here, because you want to remotely login to the console to set up a Wi-Fi connection, but to do that you first need the IP address of your Jetson that you get after establishing the Wi-Fi connecton. USB Device Mode What comes handy here is USB Device Mode . You connect your (laptop) PC and Jetson using a Micro-USB cable. (Type-A end goes to your PC, Micro-B end goes to Jetson) Using this wired connection, you can access the terminal on Jetson from your (laptop) PC. With USB Device Mode, Jetson presents 3 different USB Device Class end-points to the PC that it got connected to. They function as USB mass storage device (you see L4T-README drive mounted on your PC, like a USB thumbdrive) USB serial (like the common \"FTDI\" USB to serial adapter) USB network interface card (like a virtual Ethernet adapter) With the virtual Ethernet adapter functinality, Jetson forms a virutal local Ethernet network with Jetson being 192.168.55.1 and your PC being 192.168.55.100 . So you can actually SSH login from your (laptop) PC by specifying 192.168.55.1 , if you have already set up your acount (with username and password). If you are using Jetson for the first time right after you flash your SD card, then you don't have this user account set up. In that case, you want to use the USB serial functinality, and use your serial terminal software on your PC to have accesss to the Jetson's serial terminal. So either way, with a Micro USB cable, you can have an access to Jetson's terminal. Connect Wi-Fi using nmcli command If a Wi-Fi adaptor (either Intel 8265 M.2 card or a USB Wi-Fi dongle) is attached, you can configure the wireless network using nmcli command. You can first check if you want a wireless adapter on your system. Look for wlan0 . $ nmcli device DEVICE TYPE STATE CONNECTION l4tbr0 bridge connected l4tbr0 wlan0 wifi disconnected -- eth0 ethernet unavailable -- dummy0 dummy unmanaged -- rndis0 ethernet unmanaged -- usb0 ethernet unmanaged -- lo loopback unmanaged -- Then you can list all the wirelss networks (SSDI) in the area. $ nmcli device wifi list IN-USE SSID MODE CHAN RATE SIGNAL BARS SE -- Infra 6 195 Mbit/s 82 \u2582\u2584\u2586\u2588 WP -- Infra 6 195 Mbit/s 82 \u2582\u2584\u2586\u2588 WP -- Infra 6 195 Mbit/s 75 \u2582\u2584\u2586_ WP MY_WIFI_AP Infra 6 195 Mbit/s 70 \u2582\u2584\u2586_ WP -- Infra 6 195 Mbit/s 70 \u2582\u2584\u2586_ WP ********* Infra 1 405 Mbit/s 64 \u2582\u2584\u2586_ WP ************ Infra 153 405 Mbit/s 64 \u2582\u2584\u2586_ WP ... To connect to your wireless network (AP, access point), issue the commands below. $ sudo nmcli device wifi connect <MY_WIFI_AP> password <MY_WIFI_PASSWORD> Device 'wlan0' successfully activated with '2a26d5ca-****-****-****-**************' . Check IP address To check your IP address, use ifconfig . Check the wlan0 part at the very bottom. $ ifconfig dummy0: flags = 195 <UP,BROADCAST,RUNNING,NOARP> mtu 1500 inet6 fe80::d854:8ff:fe87:e631 prefixlen 64 scopeid 0x20<link> ether da:54:08:87:e6:31 txqueuelen 1000 ( Ethernet ) RX packets 0 bytes 0 ( 0 .0 B ) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 24 bytes 3376 ( 3 .3 KB ) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 l4tbr0: flags = 4163 <UP,BROADCAST,RUNNING,MULTICAST> mtu 1500 inet 192 .168.55.1 netmask 255 .255.255.0 broadcast 192 .168.55.255 inet6 fe80::1 prefixlen 128 scopeid 0x20<link> inet6 fe80::943c:9dff:fe90:eb89 prefixlen 64 scopeid 0x20<link> ether 96 :3c:9d:90:eb:89 txqueuelen 1000 ( Ethernet ) RX packets 15189 bytes 1343038 ( 1 .3 MB ) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 4344 bytes 411009 ( 411 .0 KB ) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 lo: flags = 73 <UP,LOOPBACK,RUNNING> mtu 65536 inet 127 .0.0.1 netmask 255 .0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10<host> loop txqueuelen 1 ( Local Loopback ) RX packets 3954 bytes 287737 ( 287 .7 KB ) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 3954 bytes 287737 ( 287 .7 KB ) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 rndis0: flags = 4163 <UP,BROADCAST,RUNNING,MULTICAST> mtu 1500 inet6 fe80::943c:9dff:fe90:eb89 prefixlen 64 scopeid 0x20<link> ether 96 :3c:9d:90:eb:89 txqueuelen 1000 ( Ethernet ) RX packets 15414 bytes 1360470 ( 1 .3 MB ) RX errors 0 dropped 7 overruns 0 frame 0 TX packets 4378 bytes 667985 ( 667 .9 KB ) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 usb0: flags = 4099 <UP,BROADCAST,MULTICAST> mtu 1500 ether 96 :3c:9d:90:eb:8b txqueuelen 1000 ( Ethernet ) RX packets 0 bytes 0 ( 0 .0 B ) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 ( 0 .0 B ) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 wlan0: flags = 4163 <UP,BROADCAST,RUNNING,MULTICAST> mtu 1500 inet 192 .168.1.58 netmask 255 .255.255.0 broadcast 192 .168.1.255 inet6 fe80::b5a0:c2e3:50bc:29a4 prefixlen 64 scopeid 0x20<link> ether b4:4b:d6:23:9a:12 txqueuelen 1000 ( Ethernet ) RX packets 26825 bytes 40675884 ( 40 .6 MB ) RX errors 0 dropped 32746 overruns 0 frame 0 TX packets 16406 bytes 1673647 ( 1 .6 MB ) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 Verify the IP address To test the IP address is valid and your Jetson is accesible, try connecting to the IP address from your separate (laptop) PC under the same network. Open your SSH client software (PuTTY, etc) on your PC, and try to connect the SSH server using the IP address you obtained on the wireless adapter. This is how you connect to your JetBot over Wi-Fi. Once you confirm you can connect to your Jetson remotely from your PC via Wi-Fi, you can now remove the Micro USB cable and let your JetBot free! Info Next, you move on to either page below. Software setup using Docker container Software setup using SD card image Once your JetBot software is configure, you should see JetBot's IP address on the small OLED display. You would only need to come back to this step to re-connect to the network or to find the IP address when your JetBot fails to get the IP address and show the current IP address on the OLED display.","title":"Wi-Fi setup"},{"location":"software_setup/wifi_setup.html#wi-fi-connection-setup","text":"Info You can skip this page if you already have a wireless connection to your JetBot from your computer. To go through the actual example applications on JetBot, you interact with JetBot from your (laptop) PC through Wi-Fi network. This document explains how you can initially set up the Wi-Fi connection on your Jetson.","title":"Wi-Fi connection setup"},{"location":"software_setup/wifi_setup.html#monitor-attached-mode","text":"The easiest way to set up the Wi-Fi connection on your Jetson, is to operate on the GUI desktop. For this you need to fisrt connect the following to the Jetson on your JetBot. HDMI monitor USB keyboard USB mouse With this setup, you can use Jetson like a standard Linux computer. We call this Monitor-attached Mode . Hint If you don't have above items handy, then you can also try the headless way of configuring Wi-Fi. Head down to the next section, Headless Mode .","title":"Monitor-attached Mode"},{"location":"software_setup/wifi_setup.html#connect-to-wi-fi-ap","text":"If a Wi-Fi adaptor (either Intel 8265 M.2 card or a USB Wi-Fi dongle) is attached, you can configure the wireless network from the desktop.","title":"Connect to Wi-Fi AP"},{"location":"software_setup/wifi_setup.html#check-ip-address","text":"After the connection established, check the IP address. Note this IP address.","title":"Check IP address"},{"location":"software_setup/wifi_setup.html#verify-the-ip-address","text":"To test the IP address is valid and your Jetson is accesible, try connecting to the IP address from your separate (laptop) PC. SSH server is enabled by default on Jetson. Open your SSH client software (PuTTY, etc) on your PC, and try to connect the SSH server on the IP address. This is how you connect to your JetBot using SSH client software. Once you confirm you can connect to your Jetson remotely from your PC via Wi-Fi, you can now remove the HDMI monitor, keyboard and mouse from Jetson , and let your JetBot free! And at this point, you are now using Jetson effectively in the Headless Mode. Hint Alternatively, even on the GUI deskop, you can open the terminal by pressing Ctrl + Alt + T keys, and follow the command-line based setup described below for headless setup.","title":"Verify the IP address"},{"location":"software_setup/wifi_setup.html#headless-mode","text":"When you put your Jetson in a deployed system, like a mobile robot, it is often difficult to attach an HDMI monitor. We can still control such Jetson remotely through network from a (laptop) PC, WHEN you already know the IP address . We call this operation mode Headless Mode . However you face a chiken-or-egg dillemna here, because you want to remotely login to the console to set up a Wi-Fi connection, but to do that you first need the IP address of your Jetson that you get after establishing the Wi-Fi connecton.","title":"Headless Mode"},{"location":"software_setup/wifi_setup.html#usb-device-mode","text":"What comes handy here is USB Device Mode . You connect your (laptop) PC and Jetson using a Micro-USB cable. (Type-A end goes to your PC, Micro-B end goes to Jetson) Using this wired connection, you can access the terminal on Jetson from your (laptop) PC. With USB Device Mode, Jetson presents 3 different USB Device Class end-points to the PC that it got connected to. They function as USB mass storage device (you see L4T-README drive mounted on your PC, like a USB thumbdrive) USB serial (like the common \"FTDI\" USB to serial adapter) USB network interface card (like a virtual Ethernet adapter) With the virtual Ethernet adapter functinality, Jetson forms a virutal local Ethernet network with Jetson being 192.168.55.1 and your PC being 192.168.55.100 . So you can actually SSH login from your (laptop) PC by specifying 192.168.55.1 , if you have already set up your acount (with username and password). If you are using Jetson for the first time right after you flash your SD card, then you don't have this user account set up. In that case, you want to use the USB serial functinality, and use your serial terminal software on your PC to have accesss to the Jetson's serial terminal. So either way, with a Micro USB cable, you can have an access to Jetson's terminal.","title":"USB Device Mode"},{"location":"software_setup/wifi_setup.html#connect-wi-fi-using-nmcli-command","text":"If a Wi-Fi adaptor (either Intel 8265 M.2 card or a USB Wi-Fi dongle) is attached, you can configure the wireless network using nmcli command. You can first check if you want a wireless adapter on your system. Look for wlan0 . $ nmcli device DEVICE TYPE STATE CONNECTION l4tbr0 bridge connected l4tbr0 wlan0 wifi disconnected -- eth0 ethernet unavailable -- dummy0 dummy unmanaged -- rndis0 ethernet unmanaged -- usb0 ethernet unmanaged -- lo loopback unmanaged -- Then you can list all the wirelss networks (SSDI) in the area. $ nmcli device wifi list IN-USE SSID MODE CHAN RATE SIGNAL BARS SE -- Infra 6 195 Mbit/s 82 \u2582\u2584\u2586\u2588 WP -- Infra 6 195 Mbit/s 82 \u2582\u2584\u2586\u2588 WP -- Infra 6 195 Mbit/s 75 \u2582\u2584\u2586_ WP MY_WIFI_AP Infra 6 195 Mbit/s 70 \u2582\u2584\u2586_ WP -- Infra 6 195 Mbit/s 70 \u2582\u2584\u2586_ WP ********* Infra 1 405 Mbit/s 64 \u2582\u2584\u2586_ WP ************ Infra 153 405 Mbit/s 64 \u2582\u2584\u2586_ WP ... To connect to your wireless network (AP, access point), issue the commands below. $ sudo nmcli device wifi connect <MY_WIFI_AP> password <MY_WIFI_PASSWORD> Device 'wlan0' successfully activated with '2a26d5ca-****-****-****-**************' .","title":"Connect Wi-Fi using nmcli command"},{"location":"software_setup/wifi_setup.html#check-ip-address_1","text":"To check your IP address, use ifconfig . Check the wlan0 part at the very bottom. $ ifconfig dummy0: flags = 195 <UP,BROADCAST,RUNNING,NOARP> mtu 1500 inet6 fe80::d854:8ff:fe87:e631 prefixlen 64 scopeid 0x20<link> ether da:54:08:87:e6:31 txqueuelen 1000 ( Ethernet ) RX packets 0 bytes 0 ( 0 .0 B ) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 24 bytes 3376 ( 3 .3 KB ) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 l4tbr0: flags = 4163 <UP,BROADCAST,RUNNING,MULTICAST> mtu 1500 inet 192 .168.55.1 netmask 255 .255.255.0 broadcast 192 .168.55.255 inet6 fe80::1 prefixlen 128 scopeid 0x20<link> inet6 fe80::943c:9dff:fe90:eb89 prefixlen 64 scopeid 0x20<link> ether 96 :3c:9d:90:eb:89 txqueuelen 1000 ( Ethernet ) RX packets 15189 bytes 1343038 ( 1 .3 MB ) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 4344 bytes 411009 ( 411 .0 KB ) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 lo: flags = 73 <UP,LOOPBACK,RUNNING> mtu 65536 inet 127 .0.0.1 netmask 255 .0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10<host> loop txqueuelen 1 ( Local Loopback ) RX packets 3954 bytes 287737 ( 287 .7 KB ) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 3954 bytes 287737 ( 287 .7 KB ) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 rndis0: flags = 4163 <UP,BROADCAST,RUNNING,MULTICAST> mtu 1500 inet6 fe80::943c:9dff:fe90:eb89 prefixlen 64 scopeid 0x20<link> ether 96 :3c:9d:90:eb:89 txqueuelen 1000 ( Ethernet ) RX packets 15414 bytes 1360470 ( 1 .3 MB ) RX errors 0 dropped 7 overruns 0 frame 0 TX packets 4378 bytes 667985 ( 667 .9 KB ) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 usb0: flags = 4099 <UP,BROADCAST,MULTICAST> mtu 1500 ether 96 :3c:9d:90:eb:8b txqueuelen 1000 ( Ethernet ) RX packets 0 bytes 0 ( 0 .0 B ) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 ( 0 .0 B ) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 wlan0: flags = 4163 <UP,BROADCAST,RUNNING,MULTICAST> mtu 1500 inet 192 .168.1.58 netmask 255 .255.255.0 broadcast 192 .168.1.255 inet6 fe80::b5a0:c2e3:50bc:29a4 prefixlen 64 scopeid 0x20<link> ether b4:4b:d6:23:9a:12 txqueuelen 1000 ( Ethernet ) RX packets 26825 bytes 40675884 ( 40 .6 MB ) RX errors 0 dropped 32746 overruns 0 frame 0 TX packets 16406 bytes 1673647 ( 1 .6 MB ) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0","title":"Check IP address"},{"location":"software_setup/wifi_setup.html#verify-the-ip-address_1","text":"To test the IP address is valid and your Jetson is accesible, try connecting to the IP address from your separate (laptop) PC under the same network. Open your SSH client software (PuTTY, etc) on your PC, and try to connect the SSH server using the IP address you obtained on the wireless adapter. This is how you connect to your JetBot over Wi-Fi. Once you confirm you can connect to your Jetson remotely from your PC via Wi-Fi, you can now remove the Micro USB cable and let your JetBot free! Info Next, you move on to either page below. Software setup using Docker container Software setup using SD card image Once your JetBot software is configure, you should see JetBot's IP address on the small OLED display. You would only need to come back to this step to re-connect to the network or to find the IP address when your JetBot fails to get the IP address and show the current IP address on the OLED display.","title":"Verify the IP address"}]}